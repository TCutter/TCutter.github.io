---
author: TCutter
comments: true
date: 2017-11-14
layout: post
categories:
- Tech
tags:
- Node.js 
- express
- mongoDb
---

### Package.json
位于模块node_modules目录下，运行nodeJS必须文件，常见属性如下：
- name : 包名
- version : 版本号
- description : 包的描述
- homepage : 包的官网 url
- author ：包的作者名
- contributors : 包的其他贡献者姓名
- dependencies :依赖包列表。如果依赖包没有安装，npm会自动将依赖包安装在node_module目录下
- repository : 包代码存放地方的类型，如git或svn
- main ： 程序的主入口文件，执行require("moduleNmae")就会加载这个文件。默认是模块根目录下的index.js文件
- keywords ：关键字

使用 `npm init` 命令可以创建package.json文件

### 事件
#### 事件循环
Node.js 的每一个 API 都是异步的，并作为一个独立线程运行，使用异步函数调用，并处理并发

Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现

Node.js单线程类似进入一个while事件循环，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数。直到没有事件观察者时退出

#### 事件驱动程序
Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。

#### EventEmitter
- Node.js里面的许多对象都会分发事件：一个net.Server对象会在每次有新连接时分发一个事件，一个fs.readStream对象会在文件被打开的时候发出一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。

- EventEmitter对象方法

 方法 | 参数 | 描述
- | :-: | -: 
addListener| (event, listener)|为指定事件添加一个监听器到监听器数组的尾部(与 on 的区别？)
on |(event, listener) |为指定事件注册一个监听器```server.on('connenction,function(){}')```
 once |  (event, listener)|为指定事件注册一个单次监听器
 removeListener |  (event, listener)|移除指定事件的某个监听器```server.on('connection', callback);server.removeListener('connection', callback);```
 removeAllListeners |[event] |移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器。
  emit |event, [arg1], [arg2], [...] |按参数的顺序执行每个监听器

  - 类方法

  方法 | 参数 | 描述
- | :-: | -: 
listenerCount| (emitter, event)|返回指定事件的监听器数量

实例
```
[index.js]

var events = require('events');
var eventsEmitter = new events.EventEmitter();


//监听器1
var listener1 = function(){
    console.log("监听器 1 执行");
};

//监听器2
var listener2 = function(){
    console.log("监听器 2 执行");
};

//绑定'connection'事件，处理函数为listener1
eventsEmitter.addListener('connection',listener1);

var eventtListners = events.EventEmitter.listenerCount(eventsEmitter,'connection'); 
console.log("共有 "+eventtListners + "个监听器");

//绑定'connection'事件，处理函数为listener2
eventsEmitter.addListener('connection',listener2);

//执行类方法
eventtListners = events.EventEmitter.listenerCount(eventsEmitter,'connection'); 
console.log("共有 "+eventtListners + "个监听器");

//处理connection事件
eventsEmitter.emit('connection');

eventsEmitter.removeListener('connection',listener1);

eventtListners = events.EventEmitter.listenerCount(eventsEmitter,'connection'); 
console.log("共有 "+eventtListners + "个监听器");

// 触发连接事件
eventsEmitter.emit('connection');

console.log("程序执行完毕。");
```

执行结果
```
[$ node index.js]

共有1个监听器
共有2个监听器
监听器 1 执行
监听器 2 执行
共有1个监听器
监听器2执行
程序执行完毕
```

### Buffer(缓冲区)
在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。